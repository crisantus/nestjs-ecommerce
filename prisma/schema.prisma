// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OverEventStatus   {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERD
  CANCELLED
}

model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  role Role @default(USER)
  defaultShippingAddress Int?
  defaultBillingAdress Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  addresses Address[]
  cartItems CartItem[]
  orders Order[]
  payment Payment[]
  @@map("users")
}

model Product {
  id Int @id @default(autoincrement())
  name String
  description String @db.Text
  price Decimal
  tags String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@fulltext([name, description, tags])
  cartItems CartItem[]
  orders OrderProduct[]
  @@map("products")
}

model Address {
  id Int @id @default(autoincrement())
  lineOne String
  lineTwo String?
  city String
  country String
  pincode String
  userId Int
  user User @relation(fields: [userId], references: [id])
  status OverEventStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("addresses")
}

model CartItem {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  productId Int
  product Product @relation(fields: [productId], references: [id])
  quantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("cart_items")
}

model Order {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  netAmount Decimal
  address String
  status OverEventStatus @default(PENDING)
  orderProduct OrderProduct[]
  events OrderEvent[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("orders")
}

model OrderProduct {
  id Int @id @default(autoincrement())
  orderId Int
  order Order @relation(fields: [orderId], references: [id])
  productId Int
  product Product @relation(fields: [productId], references: [id])
  quantity Int
  price  Decimal
  status OverEventStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("order_products")
}

model OrderEvent {
  id Int @id @default(autoincrement())
  orderId Int
  status OverEventStatus @default(PENDING)
  order Order @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("order_events")
}

model Payment {
  id               String         @id @default(cuid()) // Good choice for uniqueness
  userId           Int
  email            String
  amount           Int
  status           String
  reference        String         @unique

  paymentOption    PaymentOption  @relation(fields: [paymentOptionId], references: [id])
  paymentOptionId  Int            @default(1) // Default to e.g., Paystack unless otherwise selected

  user             User           @relation(fields: [userId], references: [id])

  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}


model PaymentOption {
  id        Int       @id @default(autoincrement())
  name      String
  active     Boolean @default(true)
  payments  Payment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}


